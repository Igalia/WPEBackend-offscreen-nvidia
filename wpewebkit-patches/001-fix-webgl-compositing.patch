From 27ae138797fe25edf333771c440cc87bc7e19fcc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Le=20Page?= <llepage@igalia.com>
Date: Thu, 12 Jan 2023 15:42:50 +0100
Subject: [PATCH] [WPE][WebGL][Canvas][Compositing] Fix partially rendered
 WebGL canvas compositing issue

When rendering heavy 3D scenes in a WebGL canvas using the WPE EGL
renderer, the compositor may use the element render target texture
BEFORE all the WebGL commands are correctly executed by the GPU.

Then, on most complex frames, the canvas appears totally blank or
partially rendered. This patch ensures that all GL commands from
the WebGL canvas context are finished before using the render target
texture in the compositor.
---
 .../platform/graphics/egl/GLContextEGL.cpp    |  4 +++
 .../nicosia/texmap/NicosiaGCGLLayer.cpp       |  5 +++
 .../opengl/GraphicsContextGLOpenGL.cpp        | 18 ++++++++++-
 .../graphics/opengl/GraphicsContextGLOpenGL.h |  3 ++
 .../TextureMapperPlatformLayerBuffer.cpp      | 32 +++++++++++++++++++
 .../texmap/TextureMapperPlatformLayerBuffer.h |  7 ++++
 6 files changed, 68 insertions(+), 1 deletion(-)

diff --git a/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp b/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp
index 262b2fb9..d5efa070 100644
--- a/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp
+++ b/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp
@@ -517,7 +517,11 @@ bool GLContextEGL::makeContextCurrent()
 void GLContextEGL::swapBuffers()
 {
     if (m_type == Surfaceless)
+    {
+        eglWaitClient();
+        eglWaitNative(EGL_CORE_NATIVE_ENGINE);
         return;
+    }

     ASSERT(m_surface);
     eglSwapBuffers(m_display.eglDisplay(), m_surface);
diff --git a/Source/WebCore/platform/graphics/nicosia/texmap/NicosiaGCGLLayer.cpp b/Source/WebCore/platform/graphics/nicosia/texmap/NicosiaGCGLLayer.cpp
index 35843b33..57c766da 100644
--- a/Source/WebCore/platform/graphics/nicosia/texmap/NicosiaGCGLLayer.cpp
+++ b/Source/WebCore/platform/graphics/nicosia/texmap/NicosiaGCGLLayer.cpp
@@ -91,7 +91,12 @@ void GCGLLayer::swapBuffersIfNeeded()
         auto& proxy = downcast<Nicosia::ContentLayerTextureMapperImpl>(m_contentLayer->impl()).proxy();
         Locker locker { proxy.lock() };
         ASSERT(is<TextureMapperPlatformLayerProxyGL>(proxy));
+#if USE(LIBEPOXY)
+        downcast<TextureMapperPlatformLayerProxyGL>(proxy).pushNextBuffer(makeUnique<TextureMapperPlatformLayerBuffer>(m_context.m_compositorTexture, m_context.m_compositorTextureFence, textureSize, flags, m_context.m_internalColorFormat));
+        m_context.m_compositorTextureFence = nullptr;
+#else
         downcast<TextureMapperPlatformLayerProxyGL>(proxy).pushNextBuffer(makeUnique<TextureMapperPlatformLayerBuffer>(m_context.m_compositorTexture, textureSize, flags, m_context.m_internalColorFormat));
+#endif // USE(LIBEPOXY)
     }

     m_context.markLayerComposited();
diff --git a/Source/WebCore/platform/graphics/opengl/GraphicsContextGLOpenGL.cpp b/Source/WebCore/platform/graphics/opengl/GraphicsContextGLOpenGL.cpp
index 3ddaa004..be0902bc 100644
--- a/Source/WebCore/platform/graphics/opengl/GraphicsContextGLOpenGL.cpp
+++ b/Source/WebCore/platform/graphics/opengl/GraphicsContextGLOpenGL.cpp
@@ -135,6 +135,10 @@ GraphicsContextGLOpenGL::~GraphicsContextGLOpenGL()
 #if USE(COORDINATED_GRAPHICS)
     if (m_compositorTexture)
         ::glDeleteTextures(1, &m_compositorTexture);
+#if USE(LIBEPOXY)
+    if (m_compositorTextureFence)
+        ::glDeleteSync(m_compositorTextureFence);
+#endif
 #endif

     auto attributes = contextAttributes();
@@ -399,9 +403,21 @@ void GraphicsContextGLOpenGL::prepareTexture()
 #if USE(COORDINATED_GRAPHICS)
     std::swap(m_texture, m_compositorTexture);
     std::swap(m_texture, m_intermediateTexture);
+
+#if USE(LIBEPOXY)
+    if (::glFenceSync) {
+        if (m_compositorTextureFence)
+            ::glDeleteSync(m_compositorTextureFence);
+
+        m_compositorTextureFence = ::glFenceSync(GL_SYNC_GPU_COMMANDS_COMPLETE, 0);
+    } else {
+        ::glFinish();
+    }
+#endif
+
     ::glBindFramebuffer(GL_FRAMEBUFFER, m_fbo);
     ::glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT, GL_TEXTURE_2D, m_texture, 0);
-    glFlush();
+    ::glFlush();

     ASSERT(m_state.boundReadFBO == m_state.boundDrawFBO);
     if (m_state.boundDrawFBO != m_fbo)
diff --git a/Source/WebCore/platform/graphics/opengl/GraphicsContextGLOpenGL.h b/Source/WebCore/platform/graphics/opengl/GraphicsContextGLOpenGL.h
index 69cfda06..8d5c8b58 100644
--- a/Source/WebCore/platform/graphics/opengl/GraphicsContextGLOpenGL.h
+++ b/Source/WebCore/platform/graphics/opengl/GraphicsContextGLOpenGL.h
@@ -550,6 +550,9 @@ protected:
 #if USE(COORDINATED_GRAPHICS)
     GCGLuint m_compositorTexture { 0 };
     GCGLuint m_intermediateTexture { 0 };
+#if USE(LIBEPOXY)
+    GLsync m_compositorTextureFence { nullptr };
+#endif // USE(LIBEPOXY)
 #endif

 #if USE(OPENGL_ES)
diff --git a/Source/WebCore/platform/graphics/texmap/TextureMapperPlatformLayerBuffer.cpp b/Source/WebCore/platform/graphics/texmap/TextureMapperPlatformLayerBuffer.cpp
index d401f6db..a7afea49 100644
--- a/Source/WebCore/platform/graphics/texmap/TextureMapperPlatformLayerBuffer.cpp
+++ b/Source/WebCore/platform/graphics/texmap/TextureMapperPlatformLayerBuffer.cpp
@@ -41,10 +41,22 @@ TextureMapperPlatformLayerBuffer::TextureMapperPlatformLayerBuffer(RefPtr<Bitmap
 {
 }

+#if USE(LIBEPOXY)
+TextureMapperPlatformLayerBuffer::TextureMapperPlatformLayerBuffer(GLuint textureID, GLsync textureFence, const IntSize& size, TextureMapperGL::Flags flags, GLint internalFormat)
+    : m_variant(RGBTexture { textureID })
+    , m_textureFence(textureFence)
+    , m_size(size)
+    , m_internalFormat(internalFormat)
+    , m_extraFlags(flags)
+    , m_hasManagedTexture(false)
+{
+}
+#else
 TextureMapperPlatformLayerBuffer::TextureMapperPlatformLayerBuffer(GLuint textureID, const IntSize& size, TextureMapperGL::Flags flags, GLint internalFormat)
     : TextureMapperPlatformLayerBuffer({ RGBTexture { textureID } }, size, flags, internalFormat)
 {
 }
+#endif // USE(LIBEPOXY)

 TextureMapperPlatformLayerBuffer::TextureMapperPlatformLayerBuffer(TextureVariant&& variant, const IntSize& size, TextureMapperGL::Flags flags, GLint internalFormat)
     : m_variant(WTFMove(variant))
@@ -57,6 +69,10 @@ TextureMapperPlatformLayerBuffer::TextureMapperPlatformLayerBuffer(TextureVarian

 TextureMapperPlatformLayerBuffer::~TextureMapperPlatformLayerBuffer()
 {
+#if USE(LIBEPOXY)
+    if (m_textureFence)
+        glDeleteSync(m_textureFence);
+#endif // USE(LIBEPOXY)
 }

 bool TextureMapperPlatformLayerBuffer::canReuseWithoutReset(const IntSize& size, GLint internalFormat)
@@ -66,6 +82,14 @@ bool TextureMapperPlatformLayerBuffer::canReuseWithoutReset(const IntSize& size,

 std::unique_ptr<TextureMapperPlatformLayerBuffer> TextureMapperPlatformLayerBuffer::clone()
 {
+#if USE(LIBEPOXY)
+    if (m_textureFence) {
+        glWaitSync(m_textureFence, 0, GL_TIMEOUT_IGNORED);
+        glDeleteSync(m_textureFence);
+        m_textureFence = nullptr;
+    }
+#endif // USE(LIBEPOXY)
+
     if (m_hasManagedTexture) {
         notImplemented();
         return nullptr;
@@ -99,6 +123,14 @@ void TextureMapperPlatformLayerBuffer::paintToTextureMapper(TextureMapper& textu
 {
     TextureMapperGL& texmapGL = static_cast<TextureMapperGL&>(textureMapper);

+#if USE(LIBEPOXY)
+    if (m_textureFence) {
+        glWaitSync(m_textureFence, 0, GL_TIMEOUT_IGNORED);
+        glDeleteSync(m_textureFence);
+        m_textureFence = nullptr;
+    }
+#endif // USE(LIBEPOXY)
+
     if (m_hasManagedTexture) {
         ASSERT(m_texture);
         BitmapTextureGL* textureGL = static_cast<BitmapTextureGL*>(m_texture.get());
diff --git a/Source/WebCore/platform/graphics/texmap/TextureMapperPlatformLayerBuffer.h b/Source/WebCore/platform/graphics/texmap/TextureMapperPlatformLayerBuffer.h
index ed209d09..e565c59d 100644
--- a/Source/WebCore/platform/graphics/texmap/TextureMapperPlatformLayerBuffer.h
+++ b/Source/WebCore/platform/graphics/texmap/TextureMapperPlatformLayerBuffer.h
@@ -41,7 +41,11 @@ class TextureMapperPlatformLayerBuffer : public TextureMapperPlatformLayer {
 public:
     TextureMapperPlatformLayerBuffer(RefPtr<BitmapTexture>&&, TextureMapperGL::Flags = 0);

+#if USE(LIBEPOXY)
+    TextureMapperPlatformLayerBuffer(GLuint textureID, GLsync textureFence, const IntSize&, TextureMapperGL::Flags, GLint internalFormat);
+#else
     TextureMapperPlatformLayerBuffer(GLuint textureID, const IntSize&, TextureMapperGL::Flags, GLint internalFormat);
+#endif // USE(LIBEPOXY)

     struct RGBTexture {
         GLuint id;
@@ -102,6 +106,9 @@ public:

 protected:
     TextureVariant m_variant;
+#if USE(LIBEPOXY)
+    GLsync m_textureFence = { nullptr };
+#endif // USE(LIBEPOXY)

 private:
     RefPtr<BitmapTexture> m_texture;
--
2.34.1
EOF
